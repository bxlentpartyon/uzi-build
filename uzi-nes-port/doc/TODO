- Up next:
  + Fix drivers/kb.c to not keep printing when a key is held down
  + Implement a bool type to overlay usigned char to avoid stupid mistakes
    like I had with the kb_checked var, where I wrote it as a byte in asm,
    but an int in C (i.e. 2 bytes).
    * Probably should have more safety checks for C<->ASM types like this.

7/8/24 - Move read_keyboard out of NMI to make more room for data transfers.

10/17/24
- di()/ei() should _not_ disable VBlank NMI - this should be handled separately.
  Currently we're enabling interrupts during interrupts, which is stupid and could
  cause problems.  I don't think it _has_ yet, but this definitely needs to be fixed.
- wait_frame_ei should probably only enable the VBlank NMI and not regular interrupts?
- Currently in the middle of changing PPU data buffer over to using locking instead
  of disabling VBlank NMIs.
- I think that I should be able to allow NMIs during IRQ if all of this other stuff
  is fixed correctly.  I know I explicitly forbade that forever ago, but I understood
  a lot less then.

11/25/24
- My curent WIP branch (67fb9625c0d924d89d27873ab378821d020f0c9b) is currently having
  problems with blowing past the NMI cycle limit.
- The issue is, now that I've change over to using locking instead of fully disabling
  the VBlank NMI, doing wait_frame doesn't actually ensure that the current buffer
  gets written out, since we might hold the databuf_lock when it is called.
- With things as they are, I either need to drop the lock before doing wait_frame, or
  just do things a bit differently all around, in order to avoid queueing up more than
  the data buffer dump routine can handle.
- This also further exposes known flaws in the data buffer stuff.  We have to be really
  sure we don't feed the buffer more than it can handle outside of interrupt context,
  because it will eat whatever we feed it.

12/3/24
- I've discovered that my issues with blowing past the NMI cycle limit are a bit more
  complex than I initially realized.  What appears to be going on is that the "normal"
  stack is blowing up past 0x400, so when we switch to the interrupt stack, which starts
  at 0x400, we end up scribbling all over normal context stack data.  Since descriptors
  are stored on the stack prior to being dumped into the PPU data buffer, this means
  that we can end up writing out a garbage descriptor, which is what appears to be
  happening.
- The descriptor causing the problem is a very large read descriptor, but I've commented
  out the only PPU read, so it's clearly getting magicked in from somewhere.  I don't
  have 100% proof that the stack size is what's causing the odd output behavior, but the
  code that I wrote to detect the "bad stack" condition definitely triggers after enabling
  the clock interrupt, and I know that this can make a mess, so it needs to be fixed no
  matter what.
- Unfortunately, this means that we have to get more complex with our MMC5 paging stuff,
  as the ~0x600 bytes that we can currently use for either stack just isn't going to be
  sufficient.  If we move this stuff to an 8K PRG-RAM page, we can allocate a full 4K to
  each stack, which should _hopefully_ be sufficient...

4/6/25
- Huge reminder to look back at commit d927bc4e4cbbf6c4085e24f1c9ee3fc155129f6e
  and try to improve a bunch of my low-level/early code to be less hard-cody and
  more flexible to change.  This _will_ come up again.
