#! /usr/bin/env python
import argparse
import os
import subprocess
import sys

UZIBUILD_ROOT = os.getenv('UZIBUILD_ROOT')
UZIBUILD_DOCKER_PATH = os.path.join(UZIBUILD_ROOT, 'build-docker')
UZIBUILD_DOCKER_OUTPUT = os.path.join(UZIBUILD_DOCKER_PATH, 'build-output')
CC65_PATH = os.path.join(UZIBUILD_ROOT, 'cc65')
UZICS_PATH = os.path.join(UZIBUILD_ROOT, 'uzics-nes')
FCEUX_PATH = os.path.join(UZIBUILD_ROOT, 'fceux')

def setup_output_dir(out_dir):
    if os.path.exists(out_dir):
        return

    os.mkdir(out_dir)

def docker_build(args):
    subprocess.check_call(['docker', 'build', '-t', 'uzibuild', UZIBUILD_DOCKER_PATH])

def docker_shell(args):
    def create_mount_args():
        mounts = {
                  UZIBUILD_DOCKER_OUTPUT: '/root/output',
                  CC65_PATH: '/root/cc65',
                  UZICS_PATH: '/root/uzics-nes',
                  FCEUX_PATH: '/root/fceux',
                 }

        mount_args = []
        for mount in mounts.keys():
            mount_args.extend(['-v', mount + ':' + mounts[mount]])

        return mount_args

    setup_output_dir(UZIBUILD_DOCKER_OUTPUT)
    try:
        docker_cmd = ['docker', 'run', '-it', '-e', 'TERM=xterm-256color'] + \
                     create_mount_args() +                                   \
                     ['uzibuild', 'bash', '-l']
        subprocess.check_call(docker_cmd)
    except subprocess.CalledProcessError as e:
        if e.returncode == 130:
            pass
        else:
            raise e

def main():
    if not UZIBUILD_DOCKER_PATH:
        print('error: UZIBUILD_DOCKER_PATH is not set')
        sys.exit(1)

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    build_parser = subparsers.add_parser('docker-build')
    build_parser.set_defaults(func=docker_build)

    open_parser = subparsers.add_parser('docker-shell')
    open_parser.set_defaults(func=docker_shell)

    args = parser.parse_args()

    args.func(args)

if __name__ == '__main__':
    main()
