- Up next:
  + Fix drivers/kb.c to not keep printing when a key is held down
  + Implement a bool type to overlay usigned char to avoid stupid mistakes
    like I had with the kb_checked var, where I wrote it as a byte in asm,
    but an int in C (i.e. 2 bytes).
    * Probably should have more safety checks for C<->ASM types like this.

7/8/24 - Move read_keyboard out of NMI to make more room for data transfers.

10/17/24
- di()/ei() should _not_ disable VBlank NMI - this should be handled separately.
  Currently we're enabling interrupts during interrupts, which is stupid and could
  cause problems.  I don't think it _has_ yet, but this definitely needs to be fixed.
- wait_frame_ei should probably only enable the VBlank NMI and not regular interrupts?
- Currently in the middle of changing PPU data buffer over to using locking instead
  of disabling VBlank NMIs.
- I think that I should be able to allow NMIs during IRQ if all of this other stuff
  is fixed correctly.  I know I explicitly forbade that forever ago, but I understood
  a lot less then.

11/25/24
- My curent WIP branch (67fb9625c0d924d89d27873ab378821d020f0c9b) is currently having
  problems with blowing past the NMI cycle limit.
- The issue is, now that I've change over to using locking instead of fully disabling
  the VBlank NMI, doing wait_frame doesn't actually ensure that the current buffer
  gets written out, since we might hold the databuf_lock when it is called.
- With things as they are, I either need to drop the lock before doing wait_frame, or
  just do things a bit differently all around, in order to avoid queueing up more than
  the data buffer dump routine can handle.
- This also further exposes known flaws in the data buffer stuff.  We have to be really
  sure we don't feed the buffer more than it can handle outside of interrupt context,
  because it will eat whatever we feed it.
