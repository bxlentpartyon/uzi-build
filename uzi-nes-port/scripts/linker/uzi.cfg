MEMORY {
	NES_HEADER:	start = $0000, size = $0010, file = %O, fill = yes;
	ZERO_PAGE:	start = $0000, size = $0080, file = "", type = rw, define = yes;
	USR_ZERO_PAGE:	start = $0080, size = $0080, file = "", type = rw, define = yes;
	TEMPSTACK:	start = $0200, size = $0100, file = "", type = rw, define = yes;
	SRAM:		start = $0300, size = $0500, file = "", define = yes;

	PRG_RAM:	start = $c000, size = $2000, file = "", define = yes;

	# DATA, RODATA
	PRG_ROM00:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	# FONTDATA
	PRG_ROM01:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	# DEVIO_CODE
	PRG_ROM02:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	# DEVTTY_CODE
	PRG_ROM03:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	# SCALL1_CODE
	PRG_ROM04:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	# SCALL2_CODE
	PRG_ROM05:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	# PROCESS_CODE
	PRG_ROM06:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	# FS_CODE
	PRG_ROM07:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;

	# Unused
	PRG_ROM08:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG_ROM09:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG_ROM10:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG_ROM11:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG_ROM12:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	PRG_ROM13:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;

	# INIT_CODE
	PRG_ROM14:	start = $a000, size = $2000, file = %O, fill = yes, define = yes;
	# CODE
	PRG_ROM15:	start = $e000, size = $2000, file = %O, fill = yes, define = yes;
}

SEGMENTS {
	HEADER:		load = NES_HEADER,	type = ro;
	ZEROPAGE:	load = ZERO_PAGE,	type = zp;
	USR_ZEROPAGE:	load = USR_ZERO_PAGE,	type = zp;
	TMP_STACK:	load = TEMPSTACK,	type = rw;
	UDATA:		load = PRG_ROM00, run = PRG_RAM, type = rw, define = yes, align = $100;
	DATA:		load = PRG_ROM00, run = PRG_RAM, type = rw, define = yes, align = $100;
	RODATA:		load = PRG_ROM15, 	type = ro, define = yes;
	BLKDATA:	load = PRG_RAM,   run = PRG_RAM, type = rw, define = yes, align = $100;
	BSS:		load = PRG_RAM,		type = bss, define = yes;

	FONTDATA:	load = PRG_ROM01,	type = ro;
	DEVIO_CODE:	load = PRG_ROM02,	type = ro;
	DEVTTY_CODE:	load = PRG_ROM03,	type = ro;
	SCALL1_CODE:	load = PRG_ROM04,	type = ro;
	SCALL2_CODE:	load = PRG_ROM05,	type = ro;
	PROCESS_CODE:	load = PRG_ROM06,	type = ro;
	FS_CODE:	load = PRG_ROM07,	type = ro;
	INIT_CODE:	load = PRG_ROM14,	type = ro;
	CODE:		load = PRG_ROM15,	type = ro;

	STUB00:		load = PRG_ROM00,	type = ro, start = $bfa8;
	STUB01:		load = PRG_ROM01,	type = ro, start = $bfa8;
	STUB02:		load = PRG_ROM02,	type = ro, start = $bfa8;
	STUB03:		load = PRG_ROM03,	type = ro, start = $bfa8;
	STUB04:		load = PRG_ROM04,	type = ro, start = $bfa8;
	STUB05:		load = PRG_ROM05,	type = ro, start = $bfa8;
	STUB06:		load = PRG_ROM06,	type = ro, start = $bfa8;
	STUB07:		load = PRG_ROM07,	type = ro, start = $bfa8;
	STUB08:		load = PRG_ROM08,	type = ro, start = $bfa8;
	STUB09:		load = PRG_ROM09,	type = ro, start = $bfa8;
	STUB10:		load = PRG_ROM10,	type = ro, start = $bfa8;
	STUB11:		load = PRG_ROM11,	type = ro, start = $bfa8;
	STUB12:		load = PRG_ROM12,	type = ro, start = $bfa8;
	STUB13:		load = PRG_ROM13,	type = ro, start = $bfa8;
	STUB14:		load = PRG_ROM14,	type = ro, start = $bfa8;
	STUB15:		load = PRG_ROM15,	type = ro, start = $ffa8;
}
